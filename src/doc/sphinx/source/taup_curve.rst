
----------
TauP_Curve
----------

TauP\_Curve creates a GMT style xy formated file of time versus distance.
This can be used to create the familar travel time curves, but for
only the specified phases and depth. The curves are linearly interpolated
between known sample points, and can thus be used to get a feel for the
coarseness of sampling. For example, curves for s, S, ScS and Sdiff
for a 500 kilometer deep event in PREM could be generated by:

:code:`taup curve -mod prem -h 500 -ph s,S,ScS,Sdiff --gmt`

The :code:`-gmt` option prepends a GMT :code:`psxy` command to the output
file, creating a runnable script instead of just a data file.
The output is put in taup\_curve.gmt by default, so to view the results:

\begin{verbatim}
sh taup_curve.gmt
\end{verbatim}

and you have a plot of the wavefronts in ``taup\_curve.pdf''.

The uasage is:
\begin{verbatim}
piglet 6>taup curve --help
Usage: taup_curve [arguments]
  or, for purists, java edu.sc.seis.TauP.TauP_Curve [arguments]

Arguments are:
-ph phase list     -- comma separated phase list
-pf phasefile      -- file containing phases

-mod[el] modelname -- use velocity model "modelname" for calculations
                      Default is iasp91.

-h depth           -- source depth in km


--gmt              -- outputs curves as a complete GMT script.
--svg              -- outputs curves as a SVG image.
-reddeg velocity   -- outputs curves with a reducing velocity (deg/sec).
-redkm velocity    -- outputs curves with a reducing velocity (km/sec).
-rel phasename     -- outputs relative travel time
--mapwidth width   -- sets map width for GMT script.

-o [stdout|outfile]         -- output is redirected to stdout or to the "outfile" file
--prop [propfile]   -- set configuration properties
--debug             -- enable debugging output
--verbose           -- enable verbose output
--version           -- print the version
--help              -- print this out, but you already know that!
\end{verbatim}
